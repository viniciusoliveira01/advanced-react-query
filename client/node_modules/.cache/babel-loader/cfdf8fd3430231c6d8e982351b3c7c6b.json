{"ast":null,"code":"var _s = $RefreshSig$();\n\n// @ts-nocheck\nimport dayjs from 'dayjs';\nimport { useEffect, useState } from 'react';\nimport { useQueryClient, useQuery } from 'react-query';\nimport { axiosInstance } from '../../../axiosInstance';\nimport { queryKeys } from '../../../react-query/constants';\nimport { useUser } from '../../user/hooks/useUser';\nimport { getMonthYearDetails, getNewMonthYear } from './monthYear';\n\nasync function getAppointments(year, month) {\n  const {\n    data\n  } = await axiosInstance.get(`/appointments/${year}/${month}`);\n  console.log(data);\n  return data;\n} // types for hook return object\n\n\n// The purpose of this hook:\n//   1. track the current month/year (aka monthYear) selected by the user\n//     1a. provide a way to update state\n//   2. return the appointments for that particular monthYear\n//     2a. return in AppointmentDateMap format (appointment arrays indexed by day of month)\n//     2b. prefetch the appointments for adjacent monthYears\n//   3. track the state of the filter (all appointments / available appointments)\n//     3a. return the only the applicable appointments for the current monthYear\nexport function useAppointments() {\n  _s();\n\n  /** ****************** START 1: monthYear state *********************** */\n  // get the monthYear for the current date (for default monthYear state)\n  const currentMonthYear = getMonthYearDetails(dayjs()); // state to track current monthYear chosen by user\n  // state value is returned in hook return object\n\n  const [monthYear, setMonthYear] = useState(currentMonthYear); // setter to update monthYear obj in state when user changes month in view,\n  // returned in hook return object\n\n  function updateMonthYear(monthIncrement) {\n    setMonthYear(prevData => getNewMonthYear(prevData, monthIncrement));\n  }\n  /** ****************** END 1: monthYear state ************************* */\n\n  /** ****************** START 2: filter appointments  ****************** */\n  // State and functions for filtering appointments to show all or only available\n\n\n  const [showAll, setShowAll] = useState(false); // We will need imported function getAvailableAppointments here\n  // We need the user to pass to getAvailableAppointments so we can show\n  //   appointments that the logged-in user has reserved (in white)\n\n  const {\n    user\n  } = useUser();\n  const queryClient = useQueryClient();\n  useEffect(() => {\n    const nextMonthYear = getNewMonthYear(monthYear, 1);\n    queryClient.prefetchQuery([queryKeys.appointments, monthYear.year, monthYear.month], () => getAppointments(monthYear.year, monthYear.month));\n  }, [monthYear, queryClient]);\n  const {\n    data: appointments = {}\n  } = useQuery([queryKeys.appointments, monthYear.year, monthYear.month], () => getAppointments(monthYear.year, monthYear.month), {\n    select: showAll ? undefined : null\n  });\n  return {\n    appointments,\n    monthYear,\n    updateMonthYear,\n    showAll,\n    setShowAll\n  };\n}\n\n_s(useAppointments, \"TeXGz+pq7jgWuSzWP+B/fnCVeGE=\", false, function () {\n  return [useUser, useQueryClient, useQuery];\n});","map":{"version":3,"sources":["/Users/viniciusalexandre/Documents/development/udemy-REACT-QUERY/base-lazy-days/client/src/components/appointments/hooks/useAppointments.ts"],"names":["dayjs","useEffect","useState","useQueryClient","useQuery","axiosInstance","queryKeys","useUser","getMonthYearDetails","getNewMonthYear","getAppointments","year","month","data","get","console","log","useAppointments","currentMonthYear","monthYear","setMonthYear","updateMonthYear","monthIncrement","prevData","showAll","setShowAll","user","queryClient","nextMonthYear","prefetchQuery","appointments","select","undefined"],"mappings":";;AAAA;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAmCC,SAAnC,EAA8CC,QAA9C,QAA8D,OAA9D;AACA,SAASC,cAAT,EAAyBC,QAAzB,QAAyC,aAAzC;AAEA,SAASC,aAAT,QAA8B,wBAA9B;AACA,SAASC,SAAT,QAA0B,gCAA1B;AACA,SAASC,OAAT,QAAwB,0BAAxB;AAGA,SAASC,mBAAT,EAA8BC,eAA9B,QAAgE,aAAhE;;AAEA,eAAeC,eAAf,CACEC,IADF,EAEEC,KAFF,EAG+B;AAC7B,QAAM;AAAEC,IAAAA;AAAF,MAAW,MAAMR,aAAa,CAACS,GAAd,CAAmB,iBAAgBH,IAAK,IAAGC,KAAM,EAAjD,CAAvB;AACAG,EAAAA,OAAO,CAACC,GAAR,CAAYH,IAAZ;AACA,SAAOA,IAAP;AACD,C,CAED;;;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASI,eAAT,GAA4C;AAAA;;AACjD;AACA;AACA,QAAMC,gBAAgB,GAAGV,mBAAmB,CAACR,KAAK,EAAN,CAA5C,CAHiD,CAKjD;AACA;;AACA,QAAM,CAACmB,SAAD,EAAYC,YAAZ,IAA4BlB,QAAQ,CAACgB,gBAAD,CAA1C,CAPiD,CASjD;AACA;;AACA,WAASG,eAAT,CAAyBC,cAAzB,EAAuD;AACrDF,IAAAA,YAAY,CAAEG,QAAD,IAAcd,eAAe,CAACc,QAAD,EAAWD,cAAX,CAA9B,CAAZ;AACD;AACD;;AACA;AACA;;;AACA,QAAM,CAACE,OAAD,EAAUC,UAAV,IAAwBvB,QAAQ,CAAC,KAAD,CAAtC,CAjBiD,CAmBjD;AACA;AACA;;AACA,QAAM;AAAEwB,IAAAA;AAAF,MAAWnB,OAAO,EAAxB;AAEA,QAAMoB,WAAW,GAAGxB,cAAc,EAAlC;AAEAF,EAAAA,SAAS,CAAC,MAAM;AACd,UAAM2B,aAAa,GAAGnB,eAAe,CAACU,SAAD,EAAY,CAAZ,CAArC;AACAQ,IAAAA,WAAW,CAACE,aAAZ,CACE,CAACvB,SAAS,CAACwB,YAAX,EAAyBX,SAAS,CAACR,IAAnC,EAAyCQ,SAAS,CAACP,KAAnD,CADF,EAEE,MAAMF,eAAe,CAACS,SAAS,CAACR,IAAX,EAAiBQ,SAAS,CAACP,KAA3B,CAFvB;AAID,GANQ,EAMN,CAACO,SAAD,EAAYQ,WAAZ,CANM,CAAT;AAQA,QAAM;AAAEd,IAAAA,IAAI,EAAEiB,YAAY,GAAG;AAAvB,MAA8B1B,QAAQ,CAC1C,CAACE,SAAS,CAACwB,YAAX,EAAyBX,SAAS,CAACR,IAAnC,EAAyCQ,SAAS,CAACP,KAAnD,CAD0C,EAE1C,MAAMF,eAAe,CAACS,SAAS,CAACR,IAAX,EAAiBQ,SAAS,CAACP,KAA3B,CAFqB,EAG1C;AACEmB,IAAAA,MAAM,EAAEP,OAAO,GAAGQ,SAAH,GAAe;AADhC,GAH0C,CAA5C;AAQA,SAAO;AAAEF,IAAAA,YAAF;AAAgBX,IAAAA,SAAhB;AAA2BE,IAAAA,eAA3B;AAA4CG,IAAAA,OAA5C;AAAqDC,IAAAA;AAArD,GAAP;AACD;;GA3CeR,e;UAsBGV,O,EAEGJ,c,EAUgBC,Q","sourcesContent":["// @ts-nocheck\nimport dayjs from 'dayjs';\nimport { Dispatch, SetStateAction, useEffect, useState } from 'react';\nimport { useQueryClient, useQuery } from 'react-query';\n\nimport { axiosInstance } from '../../../axiosInstance';\nimport { queryKeys } from '../../../react-query/constants';\nimport { useUser } from '../../user/hooks/useUser';\nimport { AppointmentDateMap } from '../types';\nimport { getAvailableAppointments } from '../utils';\nimport { getMonthYearDetails, getNewMonthYear, MonthYear } from './monthYear';\n\nasync function getAppointments(\n  year: string,\n  month: string,\n): Promise<AppointmentDateMap> {\n  const { data } = await axiosInstance.get(`/appointments/${year}/${month}`);\n  console.log(data);\n  return data;\n}\n\n// types for hook return object\ninterface UseAppointments {\n  appointments: AppointmentDateMap;\n  monthYear: MonthYear;\n  updateMonthYear: (monthIncrement: number) => void;\n  showAll: boolean;\n  setShowAll: Dispatch<SetStateAction<boolean>>;\n}\n\n// The purpose of this hook:\n//   1. track the current month/year (aka monthYear) selected by the user\n//     1a. provide a way to update state\n//   2. return the appointments for that particular monthYear\n//     2a. return in AppointmentDateMap format (appointment arrays indexed by day of month)\n//     2b. prefetch the appointments for adjacent monthYears\n//   3. track the state of the filter (all appointments / available appointments)\n//     3a. return the only the applicable appointments for the current monthYear\nexport function useAppointments(): UseAppointments {\n  /** ****************** START 1: monthYear state *********************** */\n  // get the monthYear for the current date (for default monthYear state)\n  const currentMonthYear = getMonthYearDetails(dayjs());\n\n  // state to track current monthYear chosen by user\n  // state value is returned in hook return object\n  const [monthYear, setMonthYear] = useState(currentMonthYear);\n\n  // setter to update monthYear obj in state when user changes month in view,\n  // returned in hook return object\n  function updateMonthYear(monthIncrement: number): void {\n    setMonthYear((prevData) => getNewMonthYear(prevData, monthIncrement));\n  }\n  /** ****************** END 1: monthYear state ************************* */\n  /** ****************** START 2: filter appointments  ****************** */\n  // State and functions for filtering appointments to show all or only available\n  const [showAll, setShowAll] = useState(false);\n\n  // We will need imported function getAvailableAppointments here\n  // We need the user to pass to getAvailableAppointments so we can show\n  //   appointments that the logged-in user has reserved (in white)\n  const { user } = useUser();\n\n  const queryClient = useQueryClient();\n\n  useEffect(() => {\n    const nextMonthYear = getNewMonthYear(monthYear, 1);\n    queryClient.prefetchQuery(\n      [queryKeys.appointments, monthYear.year, monthYear.month],\n      () => getAppointments(monthYear.year, monthYear.month),\n    );\n  }, [monthYear, queryClient]);\n\n  const { data: appointments = {} } = useQuery(\n    [queryKeys.appointments, monthYear.year, monthYear.month],\n    () => getAppointments(monthYear.year, monthYear.month),\n    {\n      select: showAll ? undefined : null,\n    },\n  );\n\n  return { appointments, monthYear, updateMonthYear, showAll, setShowAll };\n}\n"]},"metadata":{},"sourceType":"module"}