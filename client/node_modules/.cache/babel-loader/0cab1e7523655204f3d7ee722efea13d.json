{"ast":null,"code":"var _jsxFileName = \"/Users/viniciusalexandre/Documents/development/udemy-REACT-QUERY/base-lazy-days/client/src/components/user/Signin.tsx\",\n    _s = $RefreshSig$();\n\nimport { Box, Button, Flex, FormControl, FormErrorMessage, FormLabel, Heading, HStack, Input, Stack } from '@chakra-ui/react';\nimport { useState } from 'react';\nimport { Redirect } from 'react-router-dom';\nimport { useAuth } from '../../auth/useAuth';\nimport { useUser } from './hooks/useUser'; // eslint-disable-next-line max-lines-per-function\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport function Signin() {\n  _s();\n\n  const [email, setEmail] = useState('test');\n  const [password, setPassword] = useState('test');\n  const [dirty, setDirty] = useState({\n    email: false,\n    password: false\n  });\n  const auth = useAuth();\n  const {\n    user\n  } = useUser();\n\n  if (user) {\n    return /*#__PURE__*/_jsxDEV(Redirect, {\n      to: `/user/${user.id}`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 12\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Flex, {\n      minH: \"84vh\",\n      align: \"center\",\n      justify: \"center\",\n      children: /*#__PURE__*/_jsxDEV(Stack, {\n        spacing: 8,\n        mx: \"auto\",\n        maxW: \"lg\",\n        py: 12,\n        px: 6,\n        children: [/*#__PURE__*/_jsxDEV(Stack, {\n          align: \"center\",\n          children: /*#__PURE__*/_jsxDEV(Heading, {\n            children: \"Sign in to your account\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 36,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          rounded: \"lg\",\n          bg: \"white\",\n          boxShadow: \"lg\",\n          p: 8,\n          children: /*#__PURE__*/_jsxDEV(Stack, {\n            spacing: 4,\n            children: [/*#__PURE__*/_jsxDEV(FormControl, {\n              id: \"email\",\n              isRequired: true,\n              isInvalid: !email && dirty.email,\n              children: [/*#__PURE__*/_jsxDEV(FormLabel, {\n                children: \"Email address\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 45,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Input, {\n                type: \"email\",\n                value: email,\n                onChange: e => setEmail(e.target.value),\n                onBlur: () => setDirty(prevDirty => ({ ...prevDirty,\n                  email: true\n                }))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 46,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(FormErrorMessage, {\n                children: \"Email may not be blank\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 54,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 40,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(FormControl, {\n              id: \"password\",\n              isRequired: true,\n              isInvalid: !password && dirty.password,\n              children: [/*#__PURE__*/_jsxDEV(FormLabel, {\n                children: \"Password\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 61,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Input, {\n                type: \"password\",\n                value: password,\n                onChange: e => setPassword(e.target.value),\n                onBlur: () => setDirty(prevDirty => ({ ...prevDirty,\n                  password: true\n                }))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 62,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(FormErrorMessage, {\n                children: \"Password may not be blank\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 70,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 56,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(HStack, {\n              spacing: 2,\n              width: \"100%\",\n              children: [/*#__PURE__*/_jsxDEV(Button, {\n                variant: \"outline\",\n                type: \"submit\",\n                isDisabled: !email || !password,\n                onClick: () => auth.signup(email, password),\n                children: \"Sign up\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 73,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Button, {\n                type: \"submit\",\n                isDisabled: !email || !password,\n                onClick: () => auth.signin(email, password),\n                children: \"Sign in\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 81,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 72,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 39,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n}\n\n_s(Signin, \"XFXk6agGyhqmk8jPv9e1k+AU3bU=\", false, function () {\n  return [useAuth, useUser];\n});\n\n_c = Signin;\n\nvar _c;\n\n$RefreshReg$(_c, \"Signin\");","map":{"version":3,"sources":["/Users/viniciusalexandre/Documents/development/udemy-REACT-QUERY/base-lazy-days/client/src/components/user/Signin.tsx"],"names":["Box","Button","Flex","FormControl","FormErrorMessage","FormLabel","Heading","HStack","Input","Stack","useState","Redirect","useAuth","useUser","Signin","email","setEmail","password","setPassword","dirty","setDirty","auth","user","id","e","target","value","prevDirty","signup","signin"],"mappings":"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","sourcesContent":["import {\n  Box,\n  Button,\n  Flex,\n  FormControl,\n  FormErrorMessage,\n  FormLabel,\n  Heading,\n  HStack,\n  Input,\n  Stack,\n} from '@chakra-ui/react';\nimport { ReactElement, useState } from 'react';\nimport { Redirect } from 'react-router-dom';\n\nimport { useAuth } from '../../auth/useAuth';\nimport { useUser } from './hooks/useUser';\n\n// eslint-disable-next-line max-lines-per-function\nexport function Signin(): ReactElement {\n  const [email, setEmail] = useState('test');\n  const [password, setPassword] = useState('test');\n  const [dirty, setDirty] = useState({ email: false, password: false });\n  const auth = useAuth();\n  const { user } = useUser();\n\n  if (user) {\n    return <Redirect to={`/user/${user.id}`} />;\n  }\n\n  return (\n    <>\n      <Flex minH=\"84vh\" align=\"center\" justify=\"center\">\n        <Stack spacing={8} mx=\"auto\" maxW=\"lg\" py={12} px={6}>\n          <Stack align=\"center\">\n            <Heading>Sign in to your account</Heading>\n          </Stack>\n          <Box rounded=\"lg\" bg=\"white\" boxShadow=\"lg\" p={8}>\n            <Stack spacing={4}>\n              <FormControl\n                id=\"email\"\n                isRequired\n                isInvalid={!email && dirty.email}\n              >\n                <FormLabel>Email address</FormLabel>\n                <Input\n                  type=\"email\"\n                  value={email}\n                  onChange={(e) => setEmail(e.target.value)}\n                  onBlur={() =>\n                    setDirty((prevDirty) => ({ ...prevDirty, email: true }))\n                  }\n                />\n                <FormErrorMessage>Email may not be blank</FormErrorMessage>\n              </FormControl>\n              <FormControl\n                id=\"password\"\n                isRequired\n                isInvalid={!password && dirty.password}\n              >\n                <FormLabel>Password</FormLabel>\n                <Input\n                  type=\"password\"\n                  value={password}\n                  onChange={(e) => setPassword(e.target.value)}\n                  onBlur={() =>\n                    setDirty((prevDirty) => ({ ...prevDirty, password: true }))\n                  }\n                />\n                <FormErrorMessage>Password may not be blank</FormErrorMessage>\n              </FormControl>\n              <HStack spacing={2} width=\"100%\">\n                <Button\n                  variant=\"outline\"\n                  type=\"submit\"\n                  isDisabled={!email || !password}\n                  onClick={() => auth.signup(email, password)}\n                >\n                  Sign up\n                </Button>\n                <Button\n                  type=\"submit\"\n                  isDisabled={!email || !password}\n                  onClick={() => auth.signin(email, password)}\n                >\n                  Sign in\n                </Button>\n              </HStack>\n            </Stack>\n          </Box>\n        </Stack>\n      </Flex>\n    </>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}