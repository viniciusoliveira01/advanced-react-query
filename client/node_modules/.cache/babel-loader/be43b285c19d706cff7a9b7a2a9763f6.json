{"ast":null,"code":"var _jsxFileName = \"/Users/viniciusalexandre/Documents/development/udemy-REACT-QUERY/base-lazy-days/client/src/components/appointments/Calendar.tsx\",\n    _s = $RefreshSig$();\n\n/* eslint-disable max-lines-per-function */\nimport { Box, Checkbox, Grid, Heading, HStack, IconButton } from '@chakra-ui/react';\nimport dayjs from 'dayjs';\nimport { TiArrowLeftThick, TiArrowRightThick } from 'react-icons/ti';\nimport { UserAppointments } from '../user/UserAppointments';\nimport { DateBox } from './DateBox';\nimport { useAppointments } from './hooks/useAppointments';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function Calendar() {\n  _s();\n\n  const currentDate = dayjs();\n  const {\n    appointments,\n    monthYear,\n    updateMonthYear,\n    showAll,\n    setShowAll\n  } = useAppointments();\n  return /*#__PURE__*/_jsxDEV(Box, {\n    children: [/*#__PURE__*/_jsxDEV(HStack, {\n      mt: 10,\n      spacing: 8,\n      justify: \"center\",\n      children: [/*#__PURE__*/_jsxDEV(IconButton, {\n        \"aria-label\": \"previous month\",\n        onClick: () => updateMonthYear(-1),\n        icon: /*#__PURE__*/_jsxDEV(TiArrowLeftThick, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 17\n        }, this),\n        isDisabled: monthYear.startDate < currentDate\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Heading, {\n        minW: \"40%\",\n        textAlign: \"center\",\n        children: [monthYear.monthName, \" \", monthYear.year]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(IconButton, {\n        \"aria-label\": \"next month\",\n        onClick: () => updateMonthYear(1),\n        icon: /*#__PURE__*/_jsxDEV(TiArrowRightThick, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Checkbox, {\n        variant: \"flushed\",\n        width: \"48\",\n        position: \"absolute\",\n        right: \"10px\",\n        checked: !showAll,\n        defaultIsChecked: true,\n        onChange: () => setShowAll(prevValue => !prevValue),\n        children: \"Only show available\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      templateColumns: \"repeat(7, 1fr)\",\n      gap: 4,\n      my: 5,\n      mx: 10,\n      children: [/*#__PURE__*/_jsxDEV(DateBox, {\n        date: 1,\n        gridColumn: monthYear.firstDOW + 1,\n        appointments: appointments\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this), [...Array(monthYear.lastDate)].map((_, i) => i > 0 ? /*#__PURE__*/_jsxDEV(DateBox, {\n        date: i + 1,\n        appointments: appointments[i + 1]\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 13\n      }, this) : null)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(UserAppointments, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Calendar, \"CkR9H6WL766sVdib08nv3AfPsKM=\", false, function () {\n  return [useAppointments];\n});\n\n_c = Calendar;\n\nvar _c;\n\n$RefreshReg$(_c, \"Calendar\");","map":{"version":3,"sources":["/Users/viniciusalexandre/Documents/development/udemy-REACT-QUERY/base-lazy-days/client/src/components/appointments/Calendar.tsx"],"names":["Box","Checkbox","Grid","Heading","HStack","IconButton","dayjs","TiArrowLeftThick","TiArrowRightThick","UserAppointments","DateBox","useAppointments","Calendar","currentDate","appointments","monthYear","updateMonthYear","showAll","setShowAll","startDate","monthName","year","prevValue","firstDOW","Array","lastDate","map","_","i"],"mappings":"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","sourcesContent":["/* eslint-disable max-lines-per-function */\nimport {\n  Box,\n  Checkbox,\n  Grid,\n  Heading,\n  HStack,\n  IconButton,\n} from '@chakra-ui/react';\nimport dayjs from 'dayjs';\nimport { ReactElement } from 'react';\nimport { TiArrowLeftThick, TiArrowRightThick } from 'react-icons/ti';\n\nimport { UserAppointments } from '../user/UserAppointments';\nimport { DateBox } from './DateBox';\nimport { useAppointments } from './hooks/useAppointments';\n\nexport function Calendar(): ReactElement {\n  const currentDate = dayjs();\n\n  const {\n    appointments,\n    monthYear,\n    updateMonthYear,\n    showAll,\n    setShowAll,\n  } = useAppointments();\n\n  return (\n    <Box>\n      <HStack mt={10} spacing={8} justify=\"center\">\n        <IconButton\n          aria-label=\"previous month\"\n          onClick={() => updateMonthYear(-1)}\n          icon={<TiArrowLeftThick />}\n          isDisabled={monthYear.startDate < currentDate}\n        />\n        <Heading minW=\"40%\" textAlign=\"center\">\n          {monthYear.monthName} {monthYear.year}\n        </Heading>\n        <IconButton\n          aria-label=\"next month\"\n          onClick={() => updateMonthYear(1)}\n          icon={<TiArrowRightThick />}\n        />\n        <Checkbox\n          variant=\"flushed\"\n          width=\"48\"\n          position=\"absolute\"\n          right=\"10px\"\n          checked={!showAll}\n          defaultIsChecked\n          onChange={() => setShowAll((prevValue) => !prevValue)}\n        >\n          Only show available\n        </Checkbox>\n      </HStack>\n      <Grid templateColumns=\"repeat(7, 1fr)\" gap={4} my={5} mx={10}>\n        {/* first day needs a grid column */}\n        <DateBox\n          date={1}\n          gridColumn={monthYear.firstDOW + 1}\n          appointments={appointments}\n        />\n        {/* the rest of the days will follow */}\n        {[...Array(monthYear.lastDate)].map((_, i) =>\n          i > 0 ? (\n            <DateBox key={i} date={i + 1} appointments={appointments[i + 1]} />\n          ) : null,\n        )}\n      </Grid>\n      <UserAppointments />\n    </Box>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}