{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useQuery, useQueryClient } from 'react-query';\nimport { axiosInstance, getJWTHeader } from '../../../axiosInstance';\nimport { queryKeys } from '../../../react-query/constants';\nimport { clearStoredUser, getStoredUser, setStoredUser } from '../../../user-storage';\n\nasync function getUser(user) {\n  if (!user) return null;\n  const {\n    data\n  } = await axiosInstance.get(`/user/${user.id}`, {\n    headers: getJWTHeader(user)\n  });\n  return data.user;\n}\n\nexport function useUser() {\n  _s();\n\n  const queryClient = useQueryClient();\n  const {\n    data: user\n  } = useQuery(queryKeys.user, () => {\n    console.log('user', user);\n    return getUser(user);\n  }, {\n    initialData: getStoredUser,\n    onSuccess: received => {\n      if (!received) {\n        return clearStoredUser();\n      }\n\n      return setStoredUser(received);\n    }\n  }); // meant to be called from useAuth\n\n  function updateUser(newUser) {\n    queryClient.setQueryData(queryKeys.user, newUser);\n  } // meant to be called from useAuth\n\n\n  function clearUser() {\n    queryClient.setQueryData(queryKeys.user, null);\n  }\n\n  return {\n    user,\n    updateUser,\n    clearUser\n  };\n}\n\n_s(useUser, \"NmeRR1fLBB2wYNsHdaD9UXHQupU=\", false, function () {\n  return [useQueryClient, useQuery];\n});","map":{"version":3,"sources":["/Users/viniciusalexandre/Documents/development/udemy-REACT-QUERY/base-lazy-days/client/src/components/user/hooks/useUser.ts"],"names":["useQuery","useQueryClient","axiosInstance","getJWTHeader","queryKeys","clearStoredUser","getStoredUser","setStoredUser","getUser","user","data","get","id","headers","useUser","queryClient","console","log","initialData","onSuccess","received","updateUser","newUser","setQueryData","clearUser"],"mappings":";;AACA,SAASA,QAAT,EAAmBC,cAAnB,QAAyC,aAAzC;AAGA,SAASC,aAAT,EAAwBC,YAAxB,QAA4C,wBAA5C;AACA,SAASC,SAAT,QAA0B,gCAA1B;AACA,SACEC,eADF,EAEEC,aAFF,EAGEC,aAHF,QAIO,uBAJP;;AAMA,eAAeC,OAAf,CAAuBC,IAAvB,EAAgE;AAC9D,MAAI,CAACA,IAAL,EAAW,OAAO,IAAP;AACX,QAAM;AAAEC,IAAAA;AAAF,MAA0C,MAAMR,aAAa,CAACS,GAAd,CACnD,SAAQF,IAAI,CAACG,EAAG,EADmC,EAEpD;AACEC,IAAAA,OAAO,EAAEV,YAAY,CAACM,IAAD;AADvB,GAFoD,CAAtD;AAMA,SAAOC,IAAI,CAACD,IAAZ;AACD;;AAQD,OAAO,SAASK,OAAT,GAA4B;AAAA;;AACjC,QAAMC,WAAW,GAAGd,cAAc,EAAlC;AACA,QAAM;AAAES,IAAAA,IAAI,EAAED;AAAR,MAAiBT,QAAQ,CAC7BI,SAAS,CAACK,IADmB,EAE7B,MAAM;AACJO,IAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ,EAAoBR,IAApB;AACA,WAAOD,OAAO,CAACC,IAAD,CAAd;AACD,GAL4B,EAM7B;AACES,IAAAA,WAAW,EAAEZ,aADf;AAEEa,IAAAA,SAAS,EAAGC,QAAD,IAA2B;AACpC,UAAI,CAACA,QAAL,EAAe;AACb,eAAOf,eAAe,EAAtB;AACD;;AAED,aAAOE,aAAa,CAACa,QAAD,CAApB;AACD;AARH,GAN6B,CAA/B,CAFiC,CAoBjC;;AACA,WAASC,UAAT,CAAoBC,OAApB,EAAyC;AACvCP,IAAAA,WAAW,CAACQ,YAAZ,CAAyBnB,SAAS,CAACK,IAAnC,EAAyCa,OAAzC;AACD,GAvBgC,CAyBjC;;;AACA,WAASE,SAAT,GAAqB;AACnBT,IAAAA,WAAW,CAACQ,YAAZ,CAAyBnB,SAAS,CAACK,IAAnC,EAAyC,IAAzC;AACD;;AAED,SAAO;AAAEA,IAAAA,IAAF;AAAQY,IAAAA,UAAR;AAAoBG,IAAAA;AAApB,GAAP;AACD;;GA/BeV,O;UACMb,c,EACGD,Q","sourcesContent":["import { AxiosResponse } from 'axios';\nimport { useQuery, useQueryClient } from 'react-query';\n\nimport type { User } from '../../../../../shared/types';\nimport { axiosInstance, getJWTHeader } from '../../../axiosInstance';\nimport { queryKeys } from '../../../react-query/constants';\nimport {\n  clearStoredUser,\n  getStoredUser,\n  setStoredUser,\n} from '../../../user-storage';\n\nasync function getUser(user: User | null): Promise<User | null> {\n  if (!user) return null;\n  const { data }: AxiosResponse<{ user: User }> = await axiosInstance.get(\n    `/user/${user.id}`,\n    {\n      headers: getJWTHeader(user),\n    },\n  );\n  return data.user;\n}\n\ninterface UseUser {\n  user: User | null;\n  updateUser: (user: User) => void;\n  clearUser: () => void;\n}\n\nexport function useUser(): UseUser {\n  const queryClient = useQueryClient();\n  const { data: user } = useQuery(\n    queryKeys.user,\n    () => {\n      console.log('user', user);\n      return getUser(user);\n    },\n    {\n      initialData: getStoredUser,\n      onSuccess: (received: User | null) => {\n        if (!received) {\n          return clearStoredUser();\n        }\n\n        return setStoredUser(received);\n      },\n    },\n  );\n\n  // meant to be called from useAuth\n  function updateUser(newUser: User): void {\n    queryClient.setQueryData(queryKeys.user, newUser);\n  }\n\n  // meant to be called from useAuth\n  function clearUser() {\n    queryClient.setQueryData(queryKeys.user, null);\n  }\n\n  return { user, updateUser, clearUser };\n}\n"]},"metadata":{},"sourceType":"module"}