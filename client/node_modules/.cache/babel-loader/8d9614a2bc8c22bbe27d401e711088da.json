{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useMutation, useQueryClient } from 'react-query';\nimport { axiosInstance } from '../../../axiosInstance';\nimport { queryKeys } from '../../../react-query/constants';\nimport { useCustomToast } from '../../app/hooks/useCustomToast';\nimport { useUser } from '../../user/hooks/useUser';\n\nasync function setAppointmentUser(appointment, userId) {\n  if (!userId) return;\n  const patchOp = appointment.userId ? 'replace' : 'add';\n  const patchData = [{\n    op: patchOp,\n    path: '/userId',\n    value: userId\n  }];\n  await axiosInstance.patch(`/appointment/${appointment.id}`, {\n    data: patchData\n  });\n}\n\nexport function useReserveAppointment() {\n  _s();\n\n  const {\n    user\n  } = useUser();\n  const toast = useCustomToast();\n  const queryClient = useQueryClient();\n  const {\n    mutate\n  } = useMutation(appointment => setAppointmentUser(appointment, user === null || user === void 0 ? void 0 : user.id), {\n    onSuccess: () => {\n      queryClient.invalidateQueries([queryKeys.appointments]);\n      toast({\n        title: 'You have reserved the Appointment',\n        status: 'success'\n      });\n    }\n  });\n  return mutate;\n}\n\n_s(useReserveAppointment, \"IQgNJhzkx6C2YTeFVIwtPMfeMWA=\", false, function () {\n  return [useUser, useCustomToast, useQueryClient, useMutation];\n});","map":{"version":3,"sources":["/Users/viniciusalexandre/Documents/development/udemy-REACT-QUERY/base-lazy-days/client/src/components/appointments/hooks/useReserveAppointment.ts"],"names":["useMutation","useQueryClient","axiosInstance","queryKeys","useCustomToast","useUser","setAppointmentUser","appointment","userId","patchOp","patchData","op","path","value","patch","id","data","useReserveAppointment","user","toast","queryClient","mutate","onSuccess","invalidateQueries","appointments","title","status"],"mappings":";;AAAA,SAA4BA,WAA5B,EAAyCC,cAAzC,QAA+D,aAA/D;AAEA,SAASC,aAAT,QAA8B,wBAA9B;AACA,SAASC,SAAT,QAA0B,gCAA1B;AACA,SAASC,cAAT,QAA+B,gCAA/B;AACA,SAASC,OAAT,QAAwB,0BAAxB;;AAEA,eAAeC,kBAAf,CACEC,WADF,EAEEC,MAFF,EAGiB;AACf,MAAI,CAACA,MAAL,EAAa;AACb,QAAMC,OAAO,GAAGF,WAAW,CAACC,MAAZ,GAAqB,SAArB,GAAiC,KAAjD;AACA,QAAME,SAAS,GAAG,CAAC;AAAEC,IAAAA,EAAE,EAAEF,OAAN;AAAeG,IAAAA,IAAI,EAAE,SAArB;AAAgCC,IAAAA,KAAK,EAAEL;AAAvC,GAAD,CAAlB;AACA,QAAMN,aAAa,CAACY,KAAd,CAAqB,gBAAeP,WAAW,CAACQ,EAAG,EAAnD,EAAsD;AAC1DC,IAAAA,IAAI,EAAEN;AADoD,GAAtD,CAAN;AAGD;;AAED,OAAO,SAASO,qBAAT,GAKL;AAAA;;AACA,QAAM;AAAEC,IAAAA;AAAF,MAAWb,OAAO,EAAxB;AACA,QAAMc,KAAK,GAAGf,cAAc,EAA5B;AACA,QAAMgB,WAAW,GAAGnB,cAAc,EAAlC;AAEA,QAAM;AAAEoB,IAAAA;AAAF,MAAarB,WAAW,CAC3BO,WAAD,IAA8BD,kBAAkB,CAACC,WAAD,EAAcW,IAAd,aAAcA,IAAd,uBAAcA,IAAI,CAAEH,EAApB,CADpB,EAE5B;AACEO,IAAAA,SAAS,EAAE,MAAM;AACfF,MAAAA,WAAW,CAACG,iBAAZ,CAA8B,CAACpB,SAAS,CAACqB,YAAX,CAA9B;AACAL,MAAAA,KAAK,CAAC;AACJM,QAAAA,KAAK,EAAE,mCADH;AAEJC,QAAAA,MAAM,EAAE;AAFJ,OAAD,CAAL;AAID;AAPH,GAF4B,CAA9B;AAYA,SAAOL,MAAP;AACD;;GAvBeJ,qB;UAMGZ,O,EACHD,c,EACMH,c,EAEDD,W","sourcesContent":["import { UseMutateFunction, useMutation, useQueryClient } from 'react-query';\nimport { Appointment } from '../../../../../shared/types';\nimport { axiosInstance } from '../../../axiosInstance';\nimport { queryKeys } from '../../../react-query/constants';\nimport { useCustomToast } from '../../app/hooks/useCustomToast';\nimport { useUser } from '../../user/hooks/useUser';\n\nasync function setAppointmentUser(\n  appointment: Appointment,\n  userId: number | undefined,\n): Promise<void> {\n  if (!userId) return;\n  const patchOp = appointment.userId ? 'replace' : 'add';\n  const patchData = [{ op: patchOp, path: '/userId', value: userId }];\n  await axiosInstance.patch(`/appointment/${appointment.id}`, {\n    data: patchData,\n  });\n}\n\nexport function useReserveAppointment(): UseMutateFunction<\n  void,\n  unknown,\n  Appointment,\n  unknown\n> {\n  const { user } = useUser();\n  const toast = useCustomToast();\n  const queryClient = useQueryClient();\n\n  const { mutate } = useMutation(\n    (appointment: Appointment) => setAppointmentUser(appointment, user?.id),\n    {\n      onSuccess: () => {\n        queryClient.invalidateQueries([queryKeys.appointments]);\n        toast({\n          title: 'You have reserved the Appointment',\n          status: 'success',\n        });\n      },\n    },\n  );\n  return mutate;\n}\n"]},"metadata":{},"sourceType":"module"}