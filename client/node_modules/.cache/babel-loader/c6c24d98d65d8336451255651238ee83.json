{"ast":null,"code":"var _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { useQuery, useQueryClient } from 'react-query';\nimport { axiosInstance } from '../../../axiosInstance';\nimport { queryKeys } from '../../../react-query/constants';\n\nasync function getTreatments() {\n  const {\n    data\n  } = await axiosInstance.get('/treatments');\n  return data;\n}\n\nexport function useTreatments() {\n  _s();\n\n  const {\n    data = []\n  } = useQuery(queryKeys.treatments, getTreatments);\n  return data;\n}\n\n_s(useTreatments, \"U6ZA/3kCbCQys4OepWxWmpyDvBE=\", false, function () {\n  return [useQuery];\n});\n\nexport function usePrefetchTreatments() {\n  _s2();\n\n  const queryClient = useQueryClient();\n  queryClient.prefetchQuery(queryKeys.treatments, getTreatments);\n}\n\n_s2(usePrefetchTreatments, \"4R+oYVB2Uc11P7bp1KcuhpkfaTw=\", false, function () {\n  return [useQueryClient];\n});","map":{"version":3,"sources":["/Users/viniciusalexandre/Documents/development/udemy-REACT-QUERY/base-lazy-days/client/src/components/treatments/hooks/useTreatments.ts"],"names":["useQuery","useQueryClient","axiosInstance","queryKeys","getTreatments","data","get","useTreatments","treatments","usePrefetchTreatments","queryClient","prefetchQuery"],"mappings":";;;AAAA,SAASA,QAAT,EAAmBC,cAAnB,QAAyC,aAAzC;AAGA,SAASC,aAAT,QAA8B,wBAA9B;AACA,SAASC,SAAT,QAA0B,gCAA1B;;AAEA,eAAeC,aAAf,GAAqD;AACnD,QAAM;AAAEC,IAAAA;AAAF,MAAW,MAAMH,aAAa,CAACI,GAAd,CAAkB,aAAlB,CAAvB;AACA,SAAOD,IAAP;AACD;;AAED,OAAO,SAASE,aAAT,GAAsC;AAAA;;AAC3C,QAAM;AAAEF,IAAAA,IAAI,GAAG;AAAT,MAAgBL,QAAQ,CAACG,SAAS,CAACK,UAAX,EAAuBJ,aAAvB,CAA9B;AACA,SAAOC,IAAP;AACD;;GAHeE,a;UACQP,Q;;;AAIxB,OAAO,SAASS,qBAAT,GAAuC;AAAA;;AAC5C,QAAMC,WAAW,GAAGT,cAAc,EAAlC;AACAS,EAAAA,WAAW,CAACC,aAAZ,CAA0BR,SAAS,CAACK,UAApC,EAAgDJ,aAAhD;AACD;;IAHeK,qB;UACMR,c","sourcesContent":["import { useQuery, useQueryClient } from 'react-query';\n\nimport type { Treatment } from '../../../../../shared/types';\nimport { axiosInstance } from '../../../axiosInstance';\nimport { queryKeys } from '../../../react-query/constants';\n\nasync function getTreatments(): Promise<Treatment[]> {\n  const { data } = await axiosInstance.get('/treatments');\n  return data;\n}\n\nexport function useTreatments(): Treatment[] {\n  const { data = [] } = useQuery(queryKeys.treatments, getTreatments);\n  return data;\n}\n\nexport function usePrefetchTreatments(): void {\n  const queryClient = useQueryClient();\n  queryClient.prefetchQuery(queryKeys.treatments, getTreatments);\n}\n"]},"metadata":{},"sourceType":"module"}