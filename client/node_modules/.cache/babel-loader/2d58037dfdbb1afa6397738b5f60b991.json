{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useCustomToast } from '../../app/hooks/useCustomToast';\nimport { useUser } from '../../user/hooks/useUser'; // for when we need functions for useMutation\n// async function setAppointmentUser(\n//   appointment: Appointment,\n//   userId: number | undefined,\n// ): Promise<void> {\n//   if (!userId) return;\n//   const patchOp = appointment.userId ? 'replace' : 'add';\n//   const patchData = [{ op: patchOp, path: '/userId', value: userId }];\n//   await axiosInstance.patch(`/appointment/${appointment.id}`, {\n//     data: patchData,\n//   });\n// }\n// TODO: update type for React Query mutate function\n\nexport function useReserveAppointment() {\n  _s();\n\n  const {\n    user\n  } = useUser();\n  const toast = useCustomToast(); // TODO: replace with mutate function\n\n  return appointment => {// nothing to see here\n  };\n}\n\n_s(useReserveAppointment, \"+8JxIQxq+XI6cW5qdfZ8Mghji60=\", false, function () {\n  return [useUser, useCustomToast];\n});","map":{"version":3,"sources":["/Users/viniciusalexandre/Documents/development/udemy-REACT-QUERY/base-lazy-days/client/src/components/appointments/hooks/useReserveAppointment.ts"],"names":["useCustomToast","useUser","useReserveAppointment","user","toast","appointment"],"mappings":";;AAGA,SAASA,cAAT,QAA+B,gCAA/B;AACA,SAASC,OAAT,QAAwB,0BAAxB,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAGA,OAAO,SAASC,qBAAT,GAA8D;AAAA;;AACnE,QAAM;AAAEC,IAAAA;AAAF,MAAWF,OAAO,EAAxB;AACA,QAAMG,KAAK,GAAGJ,cAAc,EAA5B,CAFmE,CAInE;;AACA,SAAQK,WAAD,IAA8B,CACnC;AACD,GAFD;AAGD;;GAReH,qB;UACGD,O,EACHD,c","sourcesContent":["import { Appointment } from '../../../../../shared/types';\nimport { axiosInstance } from '../../../axiosInstance';\nimport { queryKeys } from '../../../react-query/constants';\nimport { useCustomToast } from '../../app/hooks/useCustomToast';\nimport { useUser } from '../../user/hooks/useUser';\n\n// for when we need functions for useMutation\n// async function setAppointmentUser(\n//   appointment: Appointment,\n//   userId: number | undefined,\n// ): Promise<void> {\n//   if (!userId) return;\n//   const patchOp = appointment.userId ? 'replace' : 'add';\n//   const patchData = [{ op: patchOp, path: '/userId', value: userId }];\n//   await axiosInstance.patch(`/appointment/${appointment.id}`, {\n//     data: patchData,\n//   });\n// }\n\n// TODO: update type for React Query mutate function\ntype AppointmentMutationFunction = (appointment: Appointment) => void;\n\nexport function useReserveAppointment(): AppointmentMutationFunction {\n  const { user } = useUser();\n  const toast = useCustomToast();\n\n  // TODO: replace with mutate function\n  return (appointment: Appointment) => {\n    // nothing to see here\n  };\n}\n"]},"metadata":{},"sourceType":"module"}