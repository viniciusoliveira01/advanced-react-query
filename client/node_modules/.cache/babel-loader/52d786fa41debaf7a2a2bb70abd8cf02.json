{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useQuery, useQueryClient } from 'react-query';\nimport { axiosInstance, getJWTHeader } from '../../../axiosInstance';\nimport { queryKeys } from '../../../react-query/constants';\nimport { clearStoredUser, getStoredUser, setStoredUser } from '../../../user-storage';\n\nasync function getUser(user, signal) {\n  if (!user) return null;\n  const {\n    data\n  } = await axiosInstance.get(`/user/${user.id}`, {\n    headers: getJWTHeader(user),\n    signal\n  });\n  return data.user;\n}\n\nexport function useUser() {\n  _s();\n\n  const queryClient = useQueryClient();\n  const {\n    data: user\n  } = useQuery(queryKeys.user, ({\n    signal\n  }) => getUser(user, signal), {\n    initialData: getStoredUser,\n    onSuccess: received => {\n      if (!received) {\n        return clearStoredUser();\n      }\n\n      return setStoredUser(received);\n    }\n  });\n\n  function updateUser(newUser) {\n    queryClient.setQueryData(queryKeys.user, newUser);\n  }\n\n  function clearUser() {\n    queryClient.setQueryData(queryKeys.user, null);\n    queryClient.removeQueries([queryKeys.appointments, queryKeys.user]);\n  }\n\n  return {\n    user,\n    updateUser,\n    clearUser\n  };\n}\n\n_s(useUser, \"NmeRR1fLBB2wYNsHdaD9UXHQupU=\", false, function () {\n  return [useQueryClient, useQuery];\n});","map":{"version":3,"sources":["/Users/viniciusalexandre/Documents/development/udemy-REACT-QUERY/base-lazy-days/client/src/components/user/hooks/useUser.ts"],"names":["useQuery","useQueryClient","axiosInstance","getJWTHeader","queryKeys","clearStoredUser","getStoredUser","setStoredUser","getUser","user","signal","data","get","id","headers","useUser","queryClient","initialData","onSuccess","received","updateUser","newUser","setQueryData","clearUser","removeQueries","appointments"],"mappings":";;AACA,SAASA,QAAT,EAAmBC,cAAnB,QAAyC,aAAzC;AAGA,SAASC,aAAT,EAAwBC,YAAxB,QAA4C,wBAA5C;AACA,SAASC,SAAT,QAA0B,gCAA1B;AACA,SACEC,eADF,EAEEC,aAFF,EAGEC,aAHF,QAIO,uBAJP;;AAMA,eAAeC,OAAf,CACEC,IADF,EAEEC,MAFF,EAGwB;AACtB,MAAI,CAACD,IAAL,EAAW,OAAO,IAAP;AACX,QAAM;AAAEE,IAAAA;AAAF,MAA0C,MAAMT,aAAa,CAACU,GAAd,CACnD,SAAQH,IAAI,CAACI,EAAG,EADmC,EAEpD;AACEC,IAAAA,OAAO,EAAEX,YAAY,CAACM,IAAD,CADvB;AAEEC,IAAAA;AAFF,GAFoD,CAAtD;AAOA,SAAOC,IAAI,CAACF,IAAZ;AACD;;AAQD,OAAO,SAASM,OAAT,GAA4B;AAAA;;AACjC,QAAMC,WAAW,GAAGf,cAAc,EAAlC;AAEA,QAAM;AAAEU,IAAAA,IAAI,EAAEF;AAAR,MAAiBT,QAAQ,CAC7BI,SAAS,CAACK,IADmB,EAE7B,CAAC;AAAEC,IAAAA;AAAF,GAAD,KAAgBF,OAAO,CAACC,IAAD,EAAOC,MAAP,CAFM,EAG7B;AACEO,IAAAA,WAAW,EAAEX,aADf;AAEEY,IAAAA,SAAS,EAAGC,QAAD,IAA2B;AACpC,UAAI,CAACA,QAAL,EAAe;AACb,eAAOd,eAAe,EAAtB;AACD;;AAED,aAAOE,aAAa,CAACY,QAAD,CAApB;AACD;AARH,GAH6B,CAA/B;;AAeA,WAASC,UAAT,CAAoBC,OAApB,EAAyC;AACvCL,IAAAA,WAAW,CAACM,YAAZ,CAAyBlB,SAAS,CAACK,IAAnC,EAAyCY,OAAzC;AACD;;AAED,WAASE,SAAT,GAAqB;AACnBP,IAAAA,WAAW,CAACM,YAAZ,CAAyBlB,SAAS,CAACK,IAAnC,EAAyC,IAAzC;AACAO,IAAAA,WAAW,CAACQ,aAAZ,CAA0B,CAACpB,SAAS,CAACqB,YAAX,EAAyBrB,SAAS,CAACK,IAAnC,CAA1B;AACD;;AAED,SAAO;AAAEA,IAAAA,IAAF;AAAQW,IAAAA,UAAR;AAAoBG,IAAAA;AAApB,GAAP;AACD;;GA5BeR,O;UACMd,c,EAEGD,Q","sourcesContent":["import { AxiosResponse } from 'axios';\nimport { useQuery, useQueryClient } from 'react-query';\n\nimport type { User } from '../../../../../shared/types';\nimport { axiosInstance, getJWTHeader } from '../../../axiosInstance';\nimport { queryKeys } from '../../../react-query/constants';\nimport {\n  clearStoredUser,\n  getStoredUser,\n  setStoredUser,\n} from '../../../user-storage';\n\nasync function getUser(\n  user: User | null,\n  signal: AbortSignal,\n): Promise<User | null> {\n  if (!user) return null;\n  const { data }: AxiosResponse<{ user: User }> = await axiosInstance.get(\n    `/user/${user.id}`,\n    {\n      headers: getJWTHeader(user),\n      signal,\n    },\n  );\n  return data.user;\n}\n\ninterface UseUser {\n  user: User | null;\n  updateUser: (user: User) => void;\n  clearUser: () => void;\n}\n\nexport function useUser(): UseUser {\n  const queryClient = useQueryClient();\n\n  const { data: user } = useQuery(\n    queryKeys.user,\n    ({ signal }) => getUser(user, signal),\n    {\n      initialData: getStoredUser,\n      onSuccess: (received: User | null) => {\n        if (!received) {\n          return clearStoredUser();\n        }\n\n        return setStoredUser(received);\n      },\n    },\n  );\n\n  function updateUser(newUser: User): void {\n    queryClient.setQueryData(queryKeys.user, newUser);\n  }\n\n  function clearUser() {\n    queryClient.setQueryData(queryKeys.user, null);\n    queryClient.removeQueries([queryKeys.appointments, queryKeys.user]);\n  }\n\n  return { user, updateUser, clearUser };\n}\n"]},"metadata":{},"sourceType":"module"}