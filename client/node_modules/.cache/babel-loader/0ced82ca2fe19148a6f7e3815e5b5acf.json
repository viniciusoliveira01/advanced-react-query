{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport jsonpatch from 'fast-json-patch';\nimport { useMutation, useQueryClient } from 'react-query';\nimport { useCustomToast } from '../../app/hooks/useCustomToast';\nimport { axiosInstance, getJWTHeader } from '../../../axiosInstance';\nimport { useUser } from './useUser';\nimport { queryKeys } from 'react-query/constants'; // for when we need a server function\n\nasync function patchUserOnServer(newData, originalData) {\n  if (!newData || !originalData) return null; // create a patch for the difference between newData and originalData\n\n  const patch = jsonpatch.compare(originalData, newData); // send patched data to the server\n\n  const {\n    data\n  } = await axiosInstance.patch(`/user/${originalData.id}`, {\n    patch\n  }, {\n    headers: getJWTHeader(originalData)\n  });\n  return data.user;\n} // TODO: update type to UseMutateFunction type\n\n\nexport function usePatchUser() {\n  _s();\n\n  const {\n    user,\n    updateUser\n  } = useUser();\n  const toast = useCustomToast();\n  const queryClient = useQueryClient();\n  const {\n    mutate: patchUser\n  } = useMutation(newUserData => patchUserOnServer(newUserData, user), {\n    onMutate: async newData => {\n      queryClient.cancelQueries(queryKeys.user);\n      const previousUserData = queryClient.getQueryData(queryKeys.user);\n      updateUser(newData);\n      return {\n        previousUserData\n      };\n    },\n    onError: (error, newData, context) => {\n      if (context.previousUserData) {\n        updateUser(context.previousUserData);\n        toast({\n          title: 'Error when updating user',\n          status: 'warning'\n        });\n      }\n    },\n    onSuccess: userData => {\n      if (user) {\n        toast({\n          title: 'User updated',\n          status: 'success'\n        });\n      }\n    },\n    onSettled: () => {\n      queryClient.invalidateQueries(queryKeys.user);\n    }\n  });\n  return patchUser;\n}\n\n_s(usePatchUser, \"7cj5AKVt9P+SDRO7AdycYdtc0IE=\", false, function () {\n  return [useUser, useCustomToast, useQueryClient, useMutation];\n});","map":{"version":3,"sources":["/Users/viniciusalexandre/Documents/development/udemy-REACT-QUERY/base-lazy-days/client/src/components/user/hooks/usePatchUser.ts"],"names":["jsonpatch","useMutation","useQueryClient","useCustomToast","axiosInstance","getJWTHeader","useUser","queryKeys","patchUserOnServer","newData","originalData","patch","compare","data","id","headers","user","usePatchUser","updateUser","toast","queryClient","mutate","patchUser","newUserData","onMutate","cancelQueries","previousUserData","getQueryData","onError","error","context","title","status","onSuccess","userData","onSettled","invalidateQueries"],"mappings":";;AAAA,OAAOA,SAAP,MAAsB,iBAAtB;AACA,SAASC,WAAT,EAAsBC,cAAtB,QAA4C,aAA5C;AACA,SAASC,cAAT,QAA+B,gCAA/B;AAEA,SAASC,aAAT,EAAwBC,YAAxB,QAA4C,wBAA5C;AACA,SAASC,OAAT,QAAwB,WAAxB;AACA,SAASC,SAAT,QAA0B,uBAA1B,C,CAEA;;AACA,eAAeC,iBAAf,CACEC,OADF,EAEEC,YAFF,EAGwB;AACtB,MAAI,CAACD,OAAD,IAAY,CAACC,YAAjB,EAA+B,OAAO,IAAP,CADT,CAEtB;;AACA,QAAMC,KAAK,GAAGX,SAAS,CAACY,OAAV,CAAkBF,YAAlB,EAAgCD,OAAhC,CAAd,CAHsB,CAKtB;;AACA,QAAM;AAAEI,IAAAA;AAAF,MAAW,MAAMT,aAAa,CAACO,KAAd,CACpB,SAAQD,YAAY,CAACI,EAAG,EADJ,EAErB;AAAEH,IAAAA;AAAF,GAFqB,EAGrB;AACEI,IAAAA,OAAO,EAAEV,YAAY,CAACK,YAAD;AADvB,GAHqB,CAAvB;AAOA,SAAOG,IAAI,CAACG,IAAZ;AACD,C,CAED;;;AACA,OAAO,SAASC,YAAT,GAAwD;AAAA;;AAC7D,QAAM;AAAED,IAAAA,IAAF;AAAQE,IAAAA;AAAR,MAAuBZ,OAAO,EAApC;AACA,QAAMa,KAAK,GAAGhB,cAAc,EAA5B;AACA,QAAMiB,WAAW,GAAGlB,cAAc,EAAlC;AAEA,QAAM;AAAEmB,IAAAA,MAAM,EAAEC;AAAV,MAAwBrB,WAAW,CACtCsB,WAAD,IAAuBf,iBAAiB,CAACe,WAAD,EAAcP,IAAd,CADD,EAEvC;AACEQ,IAAAA,QAAQ,EAAE,MAAOf,OAAP,IAAgC;AACxCW,MAAAA,WAAW,CAACK,aAAZ,CAA0BlB,SAAS,CAACS,IAApC;AAEA,YAAMU,gBAAsB,GAAGN,WAAW,CAACO,YAAZ,CAAyBpB,SAAS,CAACS,IAAnC,CAA/B;AACAE,MAAAA,UAAU,CAACT,OAAD,CAAV;AAEA,aAAO;AAAEiB,QAAAA;AAAF,OAAP;AACD,KARH;AASEE,IAAAA,OAAO,EAAE,CAACC,KAAD,EAAQpB,OAAR,EAAiBqB,OAAjB,KAA6B;AACpC,UAAIA,OAAO,CAACJ,gBAAZ,EAA8B;AAC5BR,QAAAA,UAAU,CAACY,OAAO,CAACJ,gBAAT,CAAV;AACAP,QAAAA,KAAK,CAAC;AACJY,UAAAA,KAAK,EAAE,0BADH;AAEJC,UAAAA,MAAM,EAAE;AAFJ,SAAD,CAAL;AAID;AACF,KAjBH;AAkBEC,IAAAA,SAAS,EAAGC,QAAD,IAA2B;AACpC,UAAIlB,IAAJ,EAAU;AACRG,QAAAA,KAAK,CAAC;AACJY,UAAAA,KAAK,EAAE,cADH;AAEJC,UAAAA,MAAM,EAAE;AAFJ,SAAD,CAAL;AAID;AACF,KAzBH;AA0BEG,IAAAA,SAAS,EAAE,MAAM;AACff,MAAAA,WAAW,CAACgB,iBAAZ,CAA8B7B,SAAS,CAACS,IAAxC;AACD;AA5BH,GAFuC,CAAzC;AAkCA,SAAOM,SAAP;AACD;;GAxCeL,Y;UACeX,O,EACfH,c,EACMD,c,EAEUD,W","sourcesContent":["import jsonpatch from 'fast-json-patch';\nimport { useMutation, useQueryClient } from 'react-query';\nimport { useCustomToast } from '../../app/hooks/useCustomToast';\nimport type { User } from '../../../../../shared/types';\nimport { axiosInstance, getJWTHeader } from '../../../axiosInstance';\nimport { useUser } from './useUser';\nimport { queryKeys } from 'react-query/constants';\n\n// for when we need a server function\nasync function patchUserOnServer(\n  newData: User | null,\n  originalData: User | null,\n): Promise<User | null> {\n  if (!newData || !originalData) return null;\n  // create a patch for the difference between newData and originalData\n  const patch = jsonpatch.compare(originalData, newData);\n\n  // send patched data to the server\n  const { data } = await axiosInstance.patch(\n    `/user/${originalData.id}`,\n    { patch },\n    {\n      headers: getJWTHeader(originalData),\n    },\n  );\n  return data.user;\n}\n\n// TODO: update type to UseMutateFunction type\nexport function usePatchUser(): (newData: User | null) => void {\n  const { user, updateUser } = useUser();\n  const toast = useCustomToast();\n  const queryClient = useQueryClient();\n\n  const { mutate: patchUser } = useMutation(\n    (newUserData: User) => patchUserOnServer(newUserData, user),\n    {\n      onMutate: async (newData: User | null) => {\n        queryClient.cancelQueries(queryKeys.user);\n\n        const previousUserData: User = queryClient.getQueryData(queryKeys.user);\n        updateUser(newData);\n\n        return { previousUserData };\n      },\n      onError: (error, newData, context) => {\n        if (context.previousUserData) {\n          updateUser(context.previousUserData);\n          toast({\n            title: 'Error when updating user',\n            status: 'warning',\n          });\n        }\n      },\n      onSuccess: (userData: User | null) => {\n        if (user) {\n          toast({\n            title: 'User updated',\n            status: 'success',\n          });\n        }\n      },\n      onSettled: () => {\n        queryClient.invalidateQueries(queryKeys.user);\n      },\n    },\n  );\n\n  return patchUser;\n}\n"]},"metadata":{},"sourceType":"module"}