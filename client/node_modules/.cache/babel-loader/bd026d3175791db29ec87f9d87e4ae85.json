{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport jsonpatch from 'fast-json-patch';\nimport { useMutation } from 'react-query';\nimport { useCustomToast } from '../../app/hooks/useCustomToast';\nimport { axiosInstance, getJWTHeader } from '../../../axiosInstance';\nimport { useUser } from './useUser'; // for when we need a server function\n\nasync function patchUserOnServer(newData, originalData) {\n  if (!newData || !originalData) return null; // create a patch for the difference between newData and originalData\n\n  const patch = jsonpatch.compare(originalData, newData); // send patched data to the server\n\n  const {\n    data\n  } = await axiosInstance.patch(`/user/${originalData.id}`, {\n    patch\n  }, {\n    headers: getJWTHeader(originalData)\n  });\n  return data.user;\n} // TODO: update type to UseMutateFunction type\n\n\nexport function usePatchUser() {\n  _s();\n\n  const {\n    user,\n    updateUser\n  } = useUser();\n  const toast = useCustomToast();\n  const {\n    mutate: patchUser\n  } = useMutation(newUserData => patchUserOnServer(newUserData, user), {\n    onMutate: async newData => {\n      return 1;\n    },\n    onError: previousUserDataContext => {},\n    onSuccess: userData => {\n      if (user) {\n        updateUser(userData);\n        toast({\n          title: 'User updated',\n          status: 'success'\n        });\n      }\n    },\n    onSettled: () => {\n      return 2;\n    }\n  });\n  return patchUser;\n}\n\n_s(usePatchUser, \"JrxbyD3aQpnwhUE51FII2zhy7og=\", false, function () {\n  return [useUser, useCustomToast, useMutation];\n});","map":{"version":3,"sources":["/Users/viniciusalexandre/Documents/development/udemy-REACT-QUERY/base-lazy-days/client/src/components/user/hooks/usePatchUser.ts"],"names":["jsonpatch","useMutation","useCustomToast","axiosInstance","getJWTHeader","useUser","patchUserOnServer","newData","originalData","patch","compare","data","id","headers","user","usePatchUser","updateUser","toast","mutate","patchUser","newUserData","onMutate","onError","previousUserDataContext","onSuccess","userData","title","status","onSettled"],"mappings":";;AAAA,OAAOA,SAAP,MAAsB,iBAAtB;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,SAASC,cAAT,QAA+B,gCAA/B;AAEA,SAASC,aAAT,EAAwBC,YAAxB,QAA4C,wBAA5C;AACA,SAASC,OAAT,QAAwB,WAAxB,C,CAEA;;AACA,eAAeC,iBAAf,CACEC,OADF,EAEEC,YAFF,EAGwB;AACtB,MAAI,CAACD,OAAD,IAAY,CAACC,YAAjB,EAA+B,OAAO,IAAP,CADT,CAEtB;;AACA,QAAMC,KAAK,GAAGT,SAAS,CAACU,OAAV,CAAkBF,YAAlB,EAAgCD,OAAhC,CAAd,CAHsB,CAKtB;;AACA,QAAM;AAAEI,IAAAA;AAAF,MAAW,MAAMR,aAAa,CAACM,KAAd,CACpB,SAAQD,YAAY,CAACI,EAAG,EADJ,EAErB;AAAEH,IAAAA;AAAF,GAFqB,EAGrB;AACEI,IAAAA,OAAO,EAAET,YAAY,CAACI,YAAD;AADvB,GAHqB,CAAvB;AAOA,SAAOG,IAAI,CAACG,IAAZ;AACD,C,CAED;;;AACA,OAAO,SAASC,YAAT,GAAwD;AAAA;;AAC7D,QAAM;AAAED,IAAAA,IAAF;AAAQE,IAAAA;AAAR,MAAuBX,OAAO,EAApC;AACA,QAAMY,KAAK,GAAGf,cAAc,EAA5B;AACA,QAAM;AAAEgB,IAAAA,MAAM,EAAEC;AAAV,MAAwBlB,WAAW,CACtCmB,WAAD,IAAuBd,iBAAiB,CAACc,WAAD,EAAcN,IAAd,CADD,EAEvC;AACEO,IAAAA,QAAQ,EAAE,MAAOd,OAAP,IAAgC;AACxC,aAAO,CAAP;AACD,KAHH;AAIEe,IAAAA,OAAO,EAAGC,uBAAD,IAA6B,CAAE,CAJ1C;AAKEC,IAAAA,SAAS,EAAGC,QAAD,IAA2B;AACpC,UAAIX,IAAJ,EAAU;AACRE,QAAAA,UAAU,CAACS,QAAD,CAAV;AACAR,QAAAA,KAAK,CAAC;AACJS,UAAAA,KAAK,EAAE,cADH;AAEJC,UAAAA,MAAM,EAAE;AAFJ,SAAD,CAAL;AAID;AACF,KAbH;AAcEC,IAAAA,SAAS,EAAE,MAAM;AACf,aAAO,CAAP;AACD;AAhBH,GAFuC,CAAzC;AAsBA,SAAOT,SAAP;AACD;;GA1BeJ,Y;UACeV,O,EACfH,c,EACgBD,W","sourcesContent":["import jsonpatch from 'fast-json-patch';\nimport { useMutation } from 'react-query';\nimport { useCustomToast } from '../../app/hooks/useCustomToast';\nimport type { User } from '../../../../../shared/types';\nimport { axiosInstance, getJWTHeader } from '../../../axiosInstance';\nimport { useUser } from './useUser';\n\n// for when we need a server function\nasync function patchUserOnServer(\n  newData: User | null,\n  originalData: User | null,\n): Promise<User | null> {\n  if (!newData || !originalData) return null;\n  // create a patch for the difference between newData and originalData\n  const patch = jsonpatch.compare(originalData, newData);\n\n  // send patched data to the server\n  const { data } = await axiosInstance.patch(\n    `/user/${originalData.id}`,\n    { patch },\n    {\n      headers: getJWTHeader(originalData),\n    },\n  );\n  return data.user;\n}\n\n// TODO: update type to UseMutateFunction type\nexport function usePatchUser(): (newData: User | null) => void {\n  const { user, updateUser } = useUser();\n  const toast = useCustomToast();\n  const { mutate: patchUser } = useMutation(\n    (newUserData: User) => patchUserOnServer(newUserData, user),\n    {\n      onMutate: async (newData: User | null) => {\n        return 1;\n      },\n      onError: (previousUserDataContext) => {},\n      onSuccess: (userData: User | null) => {\n        if (user) {\n          updateUser(userData);\n          toast({\n            title: 'User updated',\n            status: 'success',\n          });\n        }\n      },\n      onSettled: () => {\n        return 2;\n      },\n    },\n  );\n\n  return patchUser;\n}\n"]},"metadata":{},"sourceType":"module"}