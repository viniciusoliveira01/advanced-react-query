{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport jsonpatch from 'fast-json-patch';\nimport { axiosInstance, getJWTHeader } from '../../../axiosInstance';\nimport { useUser } from './useUser'; // for when we need a server function\n\nasync function patchUserOnServer(newData, originalData) {\n  if (!newData || !originalData) return null; // create a patch for the difference between newData and originalData\n\n  const patch = jsonpatch.compare(originalData, newData); // send patched data to the server\n\n  const {\n    data\n  } = await axiosInstance.patch(`/user/${originalData.id}`, {\n    patch\n  }, {\n    headers: getJWTHeader(originalData)\n  });\n  return data.user;\n} // TODO: update type to UseMutateFunction type\n\n\nexport function usePatchUser() {\n  _s();\n\n  const {\n    user,\n    updateUser\n  } = useUser(); // TODO: replace with mutate function\n\n  const patchUser = newData => {// nothing to see here\n  };\n\n  return patchUser;\n}\n\n_s(usePatchUser, \"GrAkLOK93jden7TqC8fz7XlBo2g=\", false, function () {\n  return [useUser];\n});","map":{"version":3,"sources":["/Users/viniciusalexandre/Documents/development/udemy-REACT-QUERY/base-lazy-days/client/src/components/user/hooks/usePatchUser.ts"],"names":["jsonpatch","axiosInstance","getJWTHeader","useUser","patchUserOnServer","newData","originalData","patch","compare","data","id","headers","user","usePatchUser","updateUser","patchUser"],"mappings":";;AAAA,OAAOA,SAAP,MAAsB,iBAAtB;AAGA,SAASC,aAAT,EAAwBC,YAAxB,QAA4C,wBAA5C;AACA,SAASC,OAAT,QAAwB,WAAxB,C,CAEA;;AACA,eAAeC,iBAAf,CACEC,OADF,EAEEC,YAFF,EAGwB;AACtB,MAAI,CAACD,OAAD,IAAY,CAACC,YAAjB,EAA+B,OAAO,IAAP,CADT,CAEtB;;AACA,QAAMC,KAAK,GAAGP,SAAS,CAACQ,OAAV,CAAkBF,YAAlB,EAAgCD,OAAhC,CAAd,CAHsB,CAKtB;;AACA,QAAM;AAAEI,IAAAA;AAAF,MAAW,MAAMR,aAAa,CAACM,KAAd,CACpB,SAAQD,YAAY,CAACI,EAAG,EADJ,EAErB;AAAEH,IAAAA;AAAF,GAFqB,EAGrB;AACEI,IAAAA,OAAO,EAAET,YAAY,CAACI,YAAD;AADvB,GAHqB,CAAvB;AAOA,SAAOG,IAAI,CAACG,IAAZ;AACD,C,CAED;;;AACA,OAAO,SAASC,YAAT,GAAwD;AAAA;;AAC7D,QAAM;AAAED,IAAAA,IAAF;AAAQE,IAAAA;AAAR,MAAuBX,OAAO,EAApC,CAD6D,CAG7D;;AACA,QAAMY,SAAS,GAAIV,OAAD,IAA0B,CAC1C;AACD,GAFD;;AAIA,SAAOU,SAAP;AACD;;GATeF,Y;UACeV,O","sourcesContent":["import jsonpatch from 'fast-json-patch';\n\nimport type { User } from '../../../../../shared/types';\nimport { axiosInstance, getJWTHeader } from '../../../axiosInstance';\nimport { useUser } from './useUser';\n\n// for when we need a server function\nasync function patchUserOnServer(\n  newData: User | null,\n  originalData: User | null,\n): Promise<User | null> {\n  if (!newData || !originalData) return null;\n  // create a patch for the difference between newData and originalData\n  const patch = jsonpatch.compare(originalData, newData);\n\n  // send patched data to the server\n  const { data } = await axiosInstance.patch(\n    `/user/${originalData.id}`,\n    { patch },\n    {\n      headers: getJWTHeader(originalData),\n    },\n  );\n  return data.user;\n}\n\n// TODO: update type to UseMutateFunction type\nexport function usePatchUser(): (newData: User | null) => void {\n  const { user, updateUser } = useUser();\n\n  // TODO: replace with mutate function\n  const patchUser = (newData: User | null) => {\n    // nothing to see here\n  };\n\n  return patchUser;\n}\n"]},"metadata":{},"sourceType":"module"}