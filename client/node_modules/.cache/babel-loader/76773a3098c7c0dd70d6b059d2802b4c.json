{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useQuery } from 'react-query';\nimport { axiosInstance } from '../../../axiosInstance';\nimport { queryKeys } from '../../../react-query/constants';\nimport { useCustomToast } from '../../app/hooks/useCustomToast';\n\nasync function getTreatments() {\n  const {\n    data\n  } = await axiosInstance.get('/treatments');\n  return data;\n}\n\nexport function useTreatments() {\n  _s();\n\n  const toast = useCustomToast();\n  const {\n    data = []\n  } = useQuery(queryKeys.treatments, getTreatments, {\n    onError: error => {\n      const title = error instanceof Error ? error.message : 'error connecting to the server';\n      toast({\n        title,\n        status: 'error '\n      });\n    }\n  });\n  return data;\n}\n\n_s(useTreatments, \"W7cTVnHACE/cVt3p4ztIqNhqUks=\", false, function () {\n  return [useCustomToast, useQuery];\n});","map":{"version":3,"sources":["/Users/viniciusalexandre/Documents/development/udemy-REACT-QUERY/base-lazy-days/client/src/components/treatments/hooks/useTreatments.ts"],"names":["useQuery","axiosInstance","queryKeys","useCustomToast","getTreatments","data","get","useTreatments","toast","treatments","onError","error","title","Error","message","status"],"mappings":";;AAAA,SAASA,QAAT,QAAyB,aAAzB;AAGA,SAASC,aAAT,QAA8B,wBAA9B;AACA,SAASC,SAAT,QAA0B,gCAA1B;AACA,SAASC,cAAT,QAA+B,gCAA/B;;AAEA,eAAeC,aAAf,GAAqD;AACnD,QAAM;AAAEC,IAAAA;AAAF,MAAW,MAAMJ,aAAa,CAACK,GAAd,CAAkB,aAAlB,CAAvB;AACA,SAAOD,IAAP;AACD;;AAED,OAAO,SAASE,aAAT,GAAsC;AAAA;;AAC3C,QAAMC,KAAK,GAAGL,cAAc,EAA5B;AAEA,QAAM;AAAEE,IAAAA,IAAI,GAAG;AAAT,MAAgBL,QAAQ,CAACE,SAAS,CAACO,UAAX,EAAuBL,aAAvB,EAAsC;AAClEM,IAAAA,OAAO,EAAGC,KAAD,IAAW;AAClB,YAAMC,KAAK,GACTD,KAAK,YAAYE,KAAjB,GACIF,KAAK,CAACG,OADV,GAEI,gCAHN;AAIAN,MAAAA,KAAK,CAAC;AAAEI,QAAAA,KAAF;AAASG,QAAAA,MAAM,EAAE;AAAjB,OAAD,CAAL;AACD;AAPiE,GAAtC,CAA9B;AASA,SAAOV,IAAP;AACD;;GAbeE,a;UACAJ,c,EAEQH,Q","sourcesContent":["import { useQuery } from 'react-query';\n\nimport type { Treatment } from '../../../../../shared/types';\nimport { axiosInstance } from '../../../axiosInstance';\nimport { queryKeys } from '../../../react-query/constants';\nimport { useCustomToast } from '../../app/hooks/useCustomToast';\n\nasync function getTreatments(): Promise<Treatment[]> {\n  const { data } = await axiosInstance.get('/treatments');\n  return data;\n}\n\nexport function useTreatments(): Treatment[] {\n  const toast = useCustomToast();\n\n  const { data = [] } = useQuery(queryKeys.treatments, getTreatments, {\n    onError: (error) => {\n      const title =\n        error instanceof Error\n          ? error.message\n          : 'error connecting to the server';\n      toast({ title, status: 'error ' });\n    },\n  });\n  return data;\n}\n"]},"metadata":{},"sourceType":"module"}