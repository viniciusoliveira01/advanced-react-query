{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useMutation } from 'react-query';\nimport { axiosInstance } from '../../../axiosInstance';\nimport { useCustomToast } from '../../app/hooks/useCustomToast';\nimport { useUser } from '../../user/hooks/useUser';\n\nasync function setAppointmentUser(appointment, userId) {\n  if (!userId) return;\n  const patchOp = appointment.userId ? 'replace' : 'add';\n  const patchData = [{\n    op: patchOp,\n    path: '/userId',\n    value: userId\n  }];\n  await axiosInstance.patch(`/appointment/${appointment.id}`, {\n    data: patchData\n  });\n}\n\nexport function useReserveAppointment() {\n  _s();\n\n  const {\n    user\n  } = useUser();\n  const toast = useCustomToast();\n  const {\n    mutate\n  } = useMutation(appointment => setAppointmentUser(appointment, user === null || user === void 0 ? void 0 : user.id));\n  return mutate;\n}\n\n_s(useReserveAppointment, \"E5biGK6hKVeRXoP/BI43Cb6s1PM=\", false, function () {\n  return [useUser, useCustomToast, useMutation];\n});","map":{"version":3,"sources":["/Users/viniciusalexandre/Documents/development/udemy-REACT-QUERY/base-lazy-days/client/src/components/appointments/hooks/useReserveAppointment.ts"],"names":["useMutation","axiosInstance","useCustomToast","useUser","setAppointmentUser","appointment","userId","patchOp","patchData","op","path","value","patch","id","data","useReserveAppointment","user","toast","mutate"],"mappings":";;AAAA,SAA4BA,WAA5B,QAA+C,aAA/C;AAEA,SAASC,aAAT,QAA8B,wBAA9B;AAEA,SAASC,cAAT,QAA+B,gCAA/B;AACA,SAASC,OAAT,QAAwB,0BAAxB;;AAEA,eAAeC,kBAAf,CACEC,WADF,EAEEC,MAFF,EAGiB;AACf,MAAI,CAACA,MAAL,EAAa;AACb,QAAMC,OAAO,GAAGF,WAAW,CAACC,MAAZ,GAAqB,SAArB,GAAiC,KAAjD;AACA,QAAME,SAAS,GAAG,CAAC;AAAEC,IAAAA,EAAE,EAAEF,OAAN;AAAeG,IAAAA,IAAI,EAAE,SAArB;AAAgCC,IAAAA,KAAK,EAAEL;AAAvC,GAAD,CAAlB;AACA,QAAML,aAAa,CAACW,KAAd,CAAqB,gBAAeP,WAAW,CAACQ,EAAG,EAAnD,EAAsD;AAC1DC,IAAAA,IAAI,EAAEN;AADoD,GAAtD,CAAN;AAGD;;AAED,OAAO,SAASO,qBAAT,GAKL;AAAA;;AACA,QAAM;AAAEC,IAAAA;AAAF,MAAWb,OAAO,EAAxB;AACA,QAAMc,KAAK,GAAGf,cAAc,EAA5B;AAEA,QAAM;AAAEgB,IAAAA;AAAF,MAAalB,WAAW,CAAEK,WAAD,IAC7BD,kBAAkB,CAACC,WAAD,EAAcW,IAAd,aAAcA,IAAd,uBAAcA,IAAI,CAAEH,EAApB,CADU,CAA9B;AAGA,SAAOK,MAAP;AACD;;GAbeH,qB;UAMGZ,O,EACHD,c,EAEKF,W","sourcesContent":["import { UseMutateFunction, useMutation } from 'react-query';\nimport { Appointment } from '../../../../../shared/types';\nimport { axiosInstance } from '../../../axiosInstance';\nimport { queryKeys } from '../../../react-query/constants';\nimport { useCustomToast } from '../../app/hooks/useCustomToast';\nimport { useUser } from '../../user/hooks/useUser';\n\nasync function setAppointmentUser(\n  appointment: Appointment,\n  userId: number | undefined,\n): Promise<void> {\n  if (!userId) return;\n  const patchOp = appointment.userId ? 'replace' : 'add';\n  const patchData = [{ op: patchOp, path: '/userId', value: userId }];\n  await axiosInstance.patch(`/appointment/${appointment.id}`, {\n    data: patchData,\n  });\n}\n\nexport function useReserveAppointment(): UseMutateFunction<\n  void,\n  unknown,\n  Appointment,\n  unknown\n> {\n  const { user } = useUser();\n  const toast = useCustomToast();\n\n  const { mutate } = useMutation((appointment: Appointment) =>\n    setAppointmentUser(appointment, user?.id),\n  );\n  return mutate;\n}\n"]},"metadata":{},"sourceType":"module"}