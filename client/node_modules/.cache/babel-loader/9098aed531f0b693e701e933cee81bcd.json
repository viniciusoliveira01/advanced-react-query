{"ast":null,"code":"var _jsxFileName = \"/Users/viniciusalexandre/Documents/development/udemy-REACT-QUERY/base-lazy-days/client/src/components/appointments/Appointment.tsx\",\n    _s = $RefreshSig$();\n\nimport { Box, HStack, Text } from '@chakra-ui/react';\nimport dayjs from 'dayjs';\nimport { useUser } from '../user/hooks/useUser';\nimport { useReserveAppointment } from './hooks/useReserveAppointment';\nimport { appointmentInPast, getAppointmentColor } from './utils';\nimport { useAppointments } from './hooks/useAppointments'; // determine whether this appointment can be reserved / un-reserved by logged-in user\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction isClickable(user, appointmentData) {\n  return !!((user === null || user === void 0 ? void 0 : user.id) && (!appointmentData.userId || appointmentData.userId === (user === null || user === void 0 ? void 0 : user.id)) && !appointmentInPast(appointmentData));\n}\n\nexport function Appointment({\n  appointmentData\n}) {\n  _s();\n\n  const {\n    user\n  } = useUser();\n  const {\n    appointments\n  } = useAppointments();\n  const reserveAppointment = useReserveAppointment();\n  const [textColor, bgColor] = getAppointmentColor(appointmentData, user === null || user === void 0 ? void 0 : user.id);\n  const clickable = isClickable(user, appointmentData);\n  let onAppointmentClick;\n  let hoverCss = {}; // turn the lozenge into a button if it's clickable\n\n  if (clickable) {\n    onAppointmentClick = user ? () => reserveAppointment(appointmentData) : undefined;\n    hoverCss = {\n      transform: 'translateY(-1px)',\n      boxShadow: 'md',\n      cursor: 'pointer'\n    };\n  }\n\n  const appointmentHour = dayjs(appointmentData.dateTime).format('h a');\n  return /*#__PURE__*/_jsxDEV(Box, {\n    borderRadius: \"lg\",\n    px: 2,\n    bgColor: bgColor,\n    color: textColor,\n    as: clickable ? 'button' : 'div',\n    onClick: onAppointmentClick,\n    _hover: hoverCss,\n    children: /*#__PURE__*/_jsxDEV(HStack, {\n      justify: \"space-between\",\n      children: [/*#__PURE__*/_jsxDEV(Text, {\n        as: \"span\",\n        fontSize: \"xs\",\n        children: appointmentHour\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Text, {\n        as: \"span\",\n        fontSize: \"xs\",\n        children: appointmentData.treatmentName\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Appointment, \"n62TMm4XLTwNHJ0oMYD+rp7fR9s=\", false, function () {\n  return [useUser, useAppointments, useReserveAppointment];\n});\n\n_c = Appointment;\n\nvar _c;\n\n$RefreshReg$(_c, \"Appointment\");","map":{"version":3,"sources":["/Users/viniciusalexandre/Documents/development/udemy-REACT-QUERY/base-lazy-days/client/src/components/appointments/Appointment.tsx"],"names":["Box","HStack","Text","dayjs","useUser","useReserveAppointment","appointmentInPast","getAppointmentColor","useAppointments","isClickable","user","appointmentData","id","userId","Appointment","appointments","reserveAppointment","textColor","bgColor","clickable","onAppointmentClick","hoverCss","undefined","transform","boxShadow","cursor","appointmentHour","dateTime","format","treatmentName"],"mappings":";;;AAAA,SAASA,GAAT,EAAcC,MAAd,EAAsBC,IAAtB,QAAkC,kBAAlC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAIA,SAASC,OAAT,QAAwB,uBAAxB;AACA,SAASC,qBAAT,QAAsC,+BAAtC;AACA,SAASC,iBAAT,EAA4BC,mBAA5B,QAAuD,SAAvD;AACA,SAASC,eAAT,QAAgC,yBAAhC,C,CAEA;;;;AACA,SAASC,WAAT,CACEC,IADF,EAEEC,eAFF,EAGW;AACT,SAAO,CAAC,EACN,CAAAD,IAAI,SAAJ,IAAAA,IAAI,WAAJ,YAAAA,IAAI,CAAEE,EAAN,MACC,CAACD,eAAe,CAACE,MAAjB,IAA2BF,eAAe,CAACE,MAAhB,MAA2BH,IAA3B,aAA2BA,IAA3B,uBAA2BA,IAAI,CAAEE,EAAjC,CAD5B,KAEA,CAACN,iBAAiB,CAACK,eAAD,CAHZ,CAAR;AAKD;;AAMD,OAAO,SAASG,WAAT,CAAqB;AAC1BH,EAAAA;AAD0B,CAArB,EAE4B;AAAA;;AACjC,QAAM;AAAED,IAAAA;AAAF,MAAWN,OAAO,EAAxB;AACA,QAAM;AAAEW,IAAAA;AAAF,MAAmBP,eAAe,EAAxC;AACA,QAAMQ,kBAAkB,GAAGX,qBAAqB,EAAhD;AACA,QAAM,CAACY,SAAD,EAAYC,OAAZ,IAAuBX,mBAAmB,CAACI,eAAD,EAAkBD,IAAlB,aAAkBA,IAAlB,uBAAkBA,IAAI,CAAEE,EAAxB,CAAhD;AAEA,QAAMO,SAAS,GAAGV,WAAW,CAACC,IAAD,EAAOC,eAAP,CAA7B;AACA,MAAIS,kBAAJ;AACA,MAAIC,QAAQ,GAAG,EAAf,CARiC,CAUjC;;AACA,MAAIF,SAAJ,EAAe;AACbC,IAAAA,kBAAkB,GAAGV,IAAI,GACrB,MAAMM,kBAAkB,CAACL,eAAD,CADH,GAErBW,SAFJ;AAGAD,IAAAA,QAAQ,GAAG;AACTE,MAAAA,SAAS,EAAE,kBADF;AAETC,MAAAA,SAAS,EAAE,IAFF;AAGTC,MAAAA,MAAM,EAAE;AAHC,KAAX;AAKD;;AAED,QAAMC,eAAe,GAAGvB,KAAK,CAACQ,eAAe,CAACgB,QAAjB,CAAL,CAAgCC,MAAhC,CAAuC,KAAvC,CAAxB;AACA,sBACE,QAAC,GAAD;AACE,IAAA,YAAY,EAAC,IADf;AAEE,IAAA,EAAE,EAAE,CAFN;AAGE,IAAA,OAAO,EAAEV,OAHX;AAIE,IAAA,KAAK,EAAED,SAJT;AAKE,IAAA,EAAE,EAAEE,SAAS,GAAG,QAAH,GAAc,KAL7B;AAME,IAAA,OAAO,EAAEC,kBANX;AAOE,IAAA,MAAM,EAAEC,QAPV;AAAA,2BASE,QAAC,MAAD;AAAQ,MAAA,OAAO,EAAC,eAAhB;AAAA,8BACE,QAAC,IAAD;AAAM,QAAA,EAAE,EAAC,MAAT;AAAgB,QAAA,QAAQ,EAAC,IAAzB;AAAA,kBACGK;AADH;AAAA;AAAA;AAAA;AAAA,cADF,eAIE,QAAC,IAAD;AAAM,QAAA,EAAE,EAAC,MAAT;AAAgB,QAAA,QAAQ,EAAC,IAAzB;AAAA,kBACGf,eAAe,CAACkB;AADnB;AAAA;AAAA;AAAA;AAAA,cAJF;AAAA;AAAA;AAAA;AAAA;AAAA;AATF;AAAA;AAAA;AAAA;AAAA,UADF;AAoBD;;GA7Cef,W;UAGGV,O,EACQI,e,EACEH,qB;;;KALbS,W","sourcesContent":["import { Box, HStack, Text } from '@chakra-ui/react';\nimport dayjs from 'dayjs';\nimport { ReactElement } from 'react';\n\nimport { Appointment as AppointmentType, User } from '../../../../shared/types';\nimport { useUser } from '../user/hooks/useUser';\nimport { useReserveAppointment } from './hooks/useReserveAppointment';\nimport { appointmentInPast, getAppointmentColor } from './utils';\nimport { useAppointments } from './hooks/useAppointments';\n\n// determine whether this appointment can be reserved / un-reserved by logged-in user\nfunction isClickable(\n  user: User | null,\n  appointmentData: AppointmentType,\n): boolean {\n  return !!(\n    user?.id &&\n    (!appointmentData.userId || appointmentData.userId === user?.id) &&\n    !appointmentInPast(appointmentData)\n  );\n}\n\ninterface AppointmentProps {\n  appointmentData: AppointmentType;\n}\n\nexport function Appointment({\n  appointmentData,\n}: AppointmentProps): ReactElement {\n  const { user } = useUser();\n  const { appointments } = useAppointments();\n  const reserveAppointment = useReserveAppointment();\n  const [textColor, bgColor] = getAppointmentColor(appointmentData, user?.id);\n\n  const clickable = isClickable(user, appointmentData);\n  let onAppointmentClick: undefined | (() => void);\n  let hoverCss = {};\n\n  // turn the lozenge into a button if it's clickable\n  if (clickable) {\n    onAppointmentClick = user\n      ? () => reserveAppointment(appointmentData)\n      : undefined;\n    hoverCss = {\n      transform: 'translateY(-1px)',\n      boxShadow: 'md',\n      cursor: 'pointer',\n    };\n  }\n\n  const appointmentHour = dayjs(appointmentData.dateTime).format('h a');\n  return (\n    <Box\n      borderRadius=\"lg\"\n      px={2}\n      bgColor={bgColor}\n      color={textColor}\n      as={clickable ? 'button' : 'div'}\n      onClick={onAppointmentClick}\n      _hover={hoverCss}\n    >\n      <HStack justify=\"space-between\">\n        <Text as=\"span\" fontSize=\"xs\">\n          {appointmentHour}\n        </Text>\n        <Text as=\"span\" fontSize=\"xs\">\n          {appointmentData.treatmentName}\n        </Text>\n      </HStack>\n    </Box>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}