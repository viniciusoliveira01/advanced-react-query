{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { axiosInstance } from '../../../axiosInstance';\nimport { useCustomToast } from '../../app/hooks/useCustomToast';\nimport { useUser } from '../../user/hooks/useUser';\n\nasync function setAppointmentUser(appointment, userId) {\n  if (!userId) return;\n  const patchOp = appointment.userId ? 'replace' : 'add';\n  const patchData = [{\n    op: patchOp,\n    path: '/userId',\n    value: userId\n  }];\n  await axiosInstance.patch(`/appointment/${appointment.id}`, {\n    data: patchData\n  });\n}\n\nexport function useReserveAppointment() {\n  _s();\n\n  const {\n    user\n  } = useUser();\n  const toast = useCustomToast();\n  return appointment => {};\n}\n\n_s(useReserveAppointment, \"+8JxIQxq+XI6cW5qdfZ8Mghji60=\", false, function () {\n  return [useUser, useCustomToast];\n});","map":{"version":3,"sources":["/Users/viniciusalexandre/Documents/development/udemy-REACT-QUERY/base-lazy-days/client/src/components/appointments/hooks/useReserveAppointment.ts"],"names":["axiosInstance","useCustomToast","useUser","setAppointmentUser","appointment","userId","patchOp","patchData","op","path","value","patch","id","data","useReserveAppointment","user","toast"],"mappings":";;AAEA,SAASA,aAAT,QAA8B,wBAA9B;AAEA,SAASC,cAAT,QAA+B,gCAA/B;AACA,SAASC,OAAT,QAAwB,0BAAxB;;AAEA,eAAeC,kBAAf,CACEC,WADF,EAEEC,MAFF,EAGiB;AACf,MAAI,CAACA,MAAL,EAAa;AACb,QAAMC,OAAO,GAAGF,WAAW,CAACC,MAAZ,GAAqB,SAArB,GAAiC,KAAjD;AACA,QAAME,SAAS,GAAG,CAAC;AAAEC,IAAAA,EAAE,EAAEF,OAAN;AAAeG,IAAAA,IAAI,EAAE,SAArB;AAAgCC,IAAAA,KAAK,EAAEL;AAAvC,GAAD,CAAlB;AACA,QAAML,aAAa,CAACW,KAAd,CAAqB,gBAAeP,WAAW,CAACQ,EAAG,EAAnD,EAAsD;AAC1DC,IAAAA,IAAI,EAAEN;AADoD,GAAtD,CAAN;AAGD;;AAID,OAAO,SAASO,qBAAT,GAA8D;AAAA;;AACnE,QAAM;AAAEC,IAAAA;AAAF,MAAWb,OAAO,EAAxB;AACA,QAAMc,KAAK,GAAGf,cAAc,EAA5B;AAEA,SAAQG,WAAD,IAA8B,CAAE,CAAvC;AACD;;GALeU,qB;UACGZ,O,EACHD,c","sourcesContent":["import { UseMutateFunction, useMutation } from 'react-query';\nimport { Appointment } from '../../../../../shared/types';\nimport { axiosInstance } from '../../../axiosInstance';\nimport { queryKeys } from '../../../react-query/constants';\nimport { useCustomToast } from '../../app/hooks/useCustomToast';\nimport { useUser } from '../../user/hooks/useUser';\n\nasync function setAppointmentUser(\n  appointment: Appointment,\n  userId: number | undefined,\n): Promise<void> {\n  if (!userId) return;\n  const patchOp = appointment.userId ? 'replace' : 'add';\n  const patchData = [{ op: patchOp, path: '/userId', value: userId }];\n  await axiosInstance.patch(`/appointment/${appointment.id}`, {\n    data: patchData,\n  });\n}\n\ntype AppointmentMutationFunction = (appointment: Appointment) => void;\n\nexport function useReserveAppointment(): AppointmentMutationFunction {\n  const { user } = useUser();\n  const toast = useCustomToast();\n\n  return (appointment: Appointment) => {};\n}\n"]},"metadata":{},"sourceType":"module"}