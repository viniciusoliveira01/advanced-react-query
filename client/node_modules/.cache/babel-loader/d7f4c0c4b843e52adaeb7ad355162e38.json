{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useQuery, useQueryClient } from 'react-query';\nimport { axiosInstance, getJWTHeader } from '../../../axiosInstance';\nimport { queryKeys } from '../../../react-query/constants';\n\nasync function getUser(user) {\n  if (!user) return null;\n  const {\n    data\n  } = await axiosInstance.get(`/user/${user.id}`, {\n    headers: getJWTHeader(user)\n  });\n  return data.user;\n}\n\nexport function useUser() {\n  _s();\n\n  const queryClient = useQueryClient();\n  const {\n    data: user\n  } = useQuery(queryKeys.user, () => getUser(user)); // meant to be called from useAuth\n\n  function updateUser(newUser) {\n    queryClient.setQueryData(queryKeys.user, newUser);\n  } // meant to be called from useAuth\n\n\n  function clearUser() {\n    queryClient.setQueryData(queryKeys.user, null);\n  }\n\n  return {\n    user,\n    updateUser,\n    clearUser\n  };\n}\n\n_s(useUser, \"NmeRR1fLBB2wYNsHdaD9UXHQupU=\", false, function () {\n  return [useQueryClient, useQuery];\n});","map":{"version":3,"sources":["/Users/viniciusalexandre/Documents/development/udemy-REACT-QUERY/base-lazy-days/client/src/components/user/hooks/useUser.ts"],"names":["useQuery","useQueryClient","axiosInstance","getJWTHeader","queryKeys","getUser","user","data","get","id","headers","useUser","queryClient","updateUser","newUser","setQueryData","clearUser"],"mappings":";;AACA,SAASA,QAAT,EAAmBC,cAAnB,QAAyC,aAAzC;AAGA,SAASC,aAAT,EAAwBC,YAAxB,QAA4C,wBAA5C;AACA,SAASC,SAAT,QAA0B,gCAA1B;;AAOA,eAAeC,OAAf,CAAuBC,IAAvB,EAAgE;AAC9D,MAAI,CAACA,IAAL,EAAW,OAAO,IAAP;AACX,QAAM;AAAEC,IAAAA;AAAF,MAA0C,MAAML,aAAa,CAACM,GAAd,CACnD,SAAQF,IAAI,CAACG,EAAG,EADmC,EAEpD;AACEC,IAAAA,OAAO,EAAEP,YAAY,CAACG,IAAD;AADvB,GAFoD,CAAtD;AAMA,SAAOC,IAAI,CAACD,IAAZ;AACD;;AAQD,OAAO,SAASK,OAAT,GAA4B;AAAA;;AACjC,QAAMC,WAAW,GAAGX,cAAc,EAAlC;AACA,QAAM;AAAEM,IAAAA,IAAI,EAAED;AAAR,MAAiBN,QAAQ,CAACI,SAAS,CAACE,IAAX,EAAiB,MAAMD,OAAO,CAACC,IAAD,CAA9B,CAA/B,CAFiC,CAIjC;;AACA,WAASO,UAAT,CAAoBC,OAApB,EAAyC;AACvCF,IAAAA,WAAW,CAACG,YAAZ,CAAyBX,SAAS,CAACE,IAAnC,EAAyCQ,OAAzC;AACD,GAPgC,CASjC;;;AACA,WAASE,SAAT,GAAqB;AACnBJ,IAAAA,WAAW,CAACG,YAAZ,CAAyBX,SAAS,CAACE,IAAnC,EAAyC,IAAzC;AACD;;AAED,SAAO;AAAEA,IAAAA,IAAF;AAAQO,IAAAA,UAAR;AAAoBG,IAAAA;AAApB,GAAP;AACD;;GAfeL,O;UACMV,c,EACGD,Q","sourcesContent":["import { AxiosResponse } from 'axios';\nimport { useQuery, useQueryClient } from 'react-query';\n\nimport type { User } from '../../../../../shared/types';\nimport { axiosInstance, getJWTHeader } from '../../../axiosInstance';\nimport { queryKeys } from '../../../react-query/constants';\nimport {\n  clearStoredUser,\n  getStoredUser,\n  setStoredUser,\n} from '../../../user-storage';\n\nasync function getUser(user: User | null): Promise<User | null> {\n  if (!user) return null;\n  const { data }: AxiosResponse<{ user: User }> = await axiosInstance.get(\n    `/user/${user.id}`,\n    {\n      headers: getJWTHeader(user),\n    },\n  );\n  return data.user;\n}\n\ninterface UseUser {\n  user: User | null;\n  updateUser: (user: User) => void;\n  clearUser: () => void;\n}\n\nexport function useUser(): UseUser {\n  const queryClient = useQueryClient();\n  const { data: user } = useQuery(queryKeys.user, () => getUser(user));\n\n  // meant to be called from useAuth\n  function updateUser(newUser: User): void {\n    queryClient.setQueryData(queryKeys.user, newUser);\n  }\n\n  // meant to be called from useAuth\n  function clearUser() {\n    queryClient.setQueryData(queryKeys.user, null);\n  }\n\n  return { user, updateUser, clearUser };\n}\n"]},"metadata":{},"sourceType":"module"}